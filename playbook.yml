---
- hosts: localhost
  connection: local
  become: false

  vars:
    ansible_python_interpreter: /usr/bin/python3
    current_user: "{{ lookup('env', 'USER') }}"
    sudoers_custom_config: |
      # Allow current user to use sudo with no password.
      {{ current_user }} ALL=(ALL) NOPASSWD: ALL

  tasks:
    - block:
      - name: Configure passwordless sudo for user
        shell: |
          echo "{{ sudoers_custom_config }}" | sudo tee /private/etc/sudoers.d/custom
          sudo chmod 0440 /private/etc/sudoers.d/custom
        args:
          creates: /private/etc/sudoers.d/custom
      tags: passwordless-sudo

    - block:
      - name: Ensure /usr/local/bin exists
        shell: sudo mkdir -p /usr/local/bin && sudo chmod 0755 /usr/local/bin
        args:
          creates: /usr/local/bin
      tags: system-setup

    - block:
      - name: Base setup MAC
        include_role:
          name: ansible-collection-mac/roles/homebrew
        vars:
          # Custom configuration to handle "already installed" exceptions
          homebrew_cask_accept_external_apps: true
          homebrew_use_brewfile: false
          homebrew_upgrade_all_packages: false

          homebrew_taps:
            - warrensbox/tap
            - nikitabobko/tap
            - FelixKratz/formulae
            - buo/cask-upgrade
            - aws/tap
            - th-ch/youtube-music

          homebrew_installed_packages:
            - eks-node-viewer
            - gitmoji
            - awscli
            - helm
            - tfswitch
            - tgswitch
            - pyenv
            - neovim
            - pyvim
            - docker
            - docker-buildx
            - postgresql
            - tig
            - zsh
            - kubectl
            - curl
            - wget
            - tree
            - tcpdump
            - htop
            - cmatrix
            - jq
            - pv
            - bat
            - golang
            - pipx
            - fzf
            - kubectx
            - istioctl
            - nvm
            - dockutil
            - sketchybar
            - borders

          homebrew_cask_apps:
            - session-manager-plugin
            - docker
            - brave-browser
            - visual-studio-code
            - slack
            - iterm2
            - rectangle
            - alfred
            - flameshot
            - vlc
            - alacritty
            - sloth
            - raycast
            - aerospace
            - font-hack-nerd-font
            - font-fira-code
            - font-ubuntu
            - font-fontawesome
            - font-hack-nerd-font
            - font-fira-code-nerd-font
            - font-monocraft
            - font-material-icons
            - youtube-music
      tags:
        - homebrew
    
    - block:
      - name: Upgrade all installed packages and casks
        command: brew upgrade
      - name: Upgrade all installed casks
        command: brew cu --all --yes
      tags: 
        - upgrade

    - block:
      - name: Install dockutil
        include_role:
          name: ansible-collection-mac/roles/dock
        vars:
          dockutil_install: false
          dockitems_remove:
            - 'Launchpad'
            - 'TV'
            - 'Podcasts'
            - 'App Store'
            - 'Mail'
            - 'Calendar'
            - 'Contacts'
            - 'Notes'
            - 'Reminders'
            - 'Pages'
            - 'Numbers'
            - 'Keynote'
            - 'Safari'
            - 'Messages'
            - 'FaceTime'
            - 'Maps'
            - 'Music'
            - 'Podcasts'
            - 'Freeform'

          dockitems_persist:
            - name: Safari
              path: "/Applications/Safari.app/"
              pos: 2
      tags: dock

    # - block:
    #   - name: Check if MacPorts is installed
    #     stat:
    #       path: /opt/local/bin/port
    #     register: macports_check

    #   - name: Download MacPorts installer
    #     get_url:
    #       url: "https://github.com/macports/macports-base/releases/download/v2.10.5/MacPorts-2.10.5-15-Sequoia.pkg"
    #       dest: "/tmp/MacPorts-2.10.5-Sequoia.pkg"
    #     when: not macports_check.stat.exists

    #   - name: Install MacPorts using installer command
    #     shell: |
    #       sudo installer -pkg /tmp/MacPorts-2.10.5-Sequoia.pkg -target / -verbose
    #     when: not macports_check.stat.exists

    #   - name: Create symlink for port in /usr/local/bin
    #     command: sudo ln -sf /opt/local/bin/port /usr/local/bin/port
    #     when: not macports_check.stat.exists

    #   - name: Update MacPorts
    #     command: sudo port selfupdate
    #     when: macports_check.stat.exists
    #     changed_when: false

    #   - name: Install meld via MacPorts
    #     command: sudo port install meld
    #     register: meld_install
    #     changed_when: "'Successfully installed' in meld_install.stdout"
    #   tags: macports

    - name: install dotbot
      pip:
        name: dotbot
        state: present

    - block:
      - name: Check if .oh-my-zsh exists
        stat:
          path: ~/.oh-my-zsh
        register: stat_oh_my_zsh_result

      - name: Download oh-my-zsh installer
        get_url:
          url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
          dest: /tmp
          mode: '0747'
        when: not stat_oh_my_zsh_result.stat.exists

      - name: Check if installer exists
        stat:
          path: /tmp/install.sh
        register: stat_oh_my_zsh_installer

      - name: Execute the zsh-installer.sh
        shell: /tmp/install.sh --unattended
        when:
          - stat_oh_my_zsh_installer.stat.exists
          - not stat_oh_my_zsh_result.stat.exists
      tags: zsh

    - block:
      - name: Check if .powerlevel10k exists
        stat:
          path: ~/.oh-my-zsh/custom/themes/powerlevel10k
        register: stat_pk10_result

      - name: install powerlevel10k
        command: git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k
        when: not stat_pk10_result.stat.exists
      tags: pk10

    - block:
      - name: create completions directory
        file:
          path: ~/.oh-my-zsh/completions
          state: directory
          recurse: yes
      tags: kubens

    - block:
      - name: Check if zsh-suggestions exists
        stat:
          path: "{{ item }}"
        with_items:
          - ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
          - ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search
          - ~/.oh-my-zsh/custom/plugins/zsh-completions
          - ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
        register: stat_sugg_result

      - name: install zsh-autosuggestions
        command: git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
        when: not stat_sugg_result.results[0].stat.exists

      - name: install zsh-history-substring-search
        command: git clone https://github.com/zsh-users/zsh-history-substring-search.git ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search
        when: not stat_sugg_result.results[1].stat.exists

      - name: install zsh-completion
        command: git clone https://github.com/zsh-users/zsh-completions.git ~/.oh-my-zsh/custom/plugins/zsh-completions
        when: not stat_sugg_result.results[2].stat.exists

      - name: install zsh-syntax-highlighting
        command: git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
        when: not stat_sugg_result.results[3].stat.exists
      tags: zsh-plugs

    - block:
      - name: Check if nvm exists
        stat:
          path: ~/.nvm/install.sh
        register: stat_nvm_result

      - name: Install latest stable node version
        shell: |
          source ~/.nvm/nvm.sh
          nvm install stable
        args:
          executable: /bin/bash
        when: stat_nvm_result.stat.exists

      - name: Install latest stable npm release
        shell: |
          source ~/.nvm/nvm.sh
          nvm install-latest-npm
        args:
          executable: /bin/bash
        when: stat_nvm_result.stat.exists
      tags: nvm

    - block:
      - name: Install sketchybar using FelixKratz's installation script
        shell: curl -L https://raw.githubusercontent.com/FelixKratz/dotfiles/master/install_sketchybar.sh | sh
        args:
          creates: "{{ lookup('env', 'HOME') }}/.config/sketchybar/sketchybarrc"
        register: sketchybar_install
        changed_when: sketchybar_install.rc == 0
      tags: sketchybar

    - name: run dotbot
      command: dotbot -c install.conf.yaml
      tags: dots

    - name: install vim plugins
      command: nvim --headless +PlugInstall +qall
      register: vim_plugins_stdout
      tags: vim-update

    - name: set default shell for user
      shell: "chsh -s $(which zsh)"
      when: ansible_user_shell != "/bin/zsh"

    - block:
      - name: Define variables
        set_fact:
          firefox_extension_base_url: "https://addons.mozilla.org/firefox/downloads/latest"
          firefox_extensions:
            - adblock-plus
            - wappalyzer
            - ublock-origin
            - tree-style-tab
            - sidebery
            - i-dont-care-about-cookies
            - to-google-translate
            - translate-web-pages
            - clearcache
            - bitwarden-password-manager
            - grammarly-1
            - react-devtools
          firefox_preferences:
            privacy.donottrackheader.enabled: true
            privacy.trackingprotection.enabled: true
            signon.rememberSignons: false
            datareporting.healthreport.uploadEnabled: false
            browser.aboutConfig.showWarning: false
            app.shield.optoutstudies.enabled: false
            toolkit.legacyUserProfileCustomizations.stylesheets: true
            browser.fullscreen.autohide: false
            app.update.auto: false
          firefox_global_dir: "/Applications/Firefox.app/Contents/Resources"

      - name: Ensure system-wide extensions directory exists
        file:
          path: "{{ firefox_global_dir }}/distribution/extensions"
          state: directory
          mode: '0755'

      - name: Download and install Firefox extensions system-wide
        get_url:
          url: "{{ firefox_extension_base_url }}/{{ item }}/addon-{{ item }}-latest.xpi"
          dest: "{{ firefox_global_dir }}/distribution/extensions/{{ item }}.xpi"
          mode: '0644'
        loop: "{{ firefox_extensions }}"

      - name: Create system-wide policies.json for enforced settings
        copy:
          dest: "{{ firefox_global_dir }}/distribution/policies.json"
          content: |
            {
              "policies": {
                "Extensions": {
                  "Install": [
                    {% for ext in firefox_extensions %}
                    "file://{{ firefox_global_dir }}/distribution/extensions/{{ ext }}.xpi"{% if not loop.last %},{% endif %}
                    {% endfor %}
                  ]
                },
                "Preferences": {
                  {% for key, value in firefox_preferences.items() %}
                  "{{ key }}": {{ value | to_json }}{% if not loop.last %},{% endif %}
                  {% endfor %}
                }
              }
            }
          mode: '0644'

      - name: Ensure system-wide preferences directory exists
        file:
          path: "{{ firefox_global_dir }}/defaults/pref"
          state: directory
          mode: '0755'

      - name: Create autoconfig.js for system-wide preferences
        copy:
          dest: "{{ firefox_global_dir }}/defaults/pref/autoconfig.js"
          content: |
            pref("general.config.filename", "mozilla.cfg");
            pref("general.config.obscure_value", 0);
          mode: '0644'

      - name: Create mozilla.cfg for system-wide enforced preferences
        copy:
          dest: "{{ firefox_global_dir }}/mozilla.cfg"
          content: |
            // Mozilla AutoConfig File
            lockPref("general.config.sandbox_enabled", false);
            {% for key, value in firefox_preferences.items() %}
            lockPref("{{ key }}", {{ value | to_json }});
            {% endfor %}
          mode: '0644'

      - name: Find all user Firefox profile directories
        shell: ls -d /Users/*/Library/Application\ Support/Firefox/Profiles/*.default-release
        register: user_profiles
        changed_when: false

      - name: Ensure chrome directories exist in each profile for userChrome.css
        file:
          path: "{{ item }}/chrome"
          state: directory
          mode: '0755'
        loop: "{{ user_profiles.stdout_lines }}"

      - name: Deploy userChrome.css for each user
        copy:
          dest: "{{ item }}/chrome/userChrome.css"
          content: |
            #TabsToolbar {
              visibility: collapse !important;
            }
            #titlebar {
              visibility: collapse !important;
            }
            #sidebar-header {
              visibility: collapse !important;
            }
          mode: '0644'
        become: yes
        loop: "{{ user_profiles.stdout_lines }}"

      - name: Restart Firefox
        shell: pkill firefox || true
        ignore_errors: yes

      always:
        - name: Notify that Firefox system-wide setup is complete
          debug:
            msg: "Firefox system-wide extensions and preferences have been applied successfully!"

      tags: firefox

    - name: Create Screenshots directory in Downloads
      file:
        path: "{{ lookup('env', 'HOME') }}/Downloads/Screenshots"
        state: directory

    - name: Configure macOS settings
      shell: |
        # Show hidden files in Finder
        defaults write com.apple.finder AppleShowAllFiles -bool true

        # Show path bar in Finder
        defaults write com.apple.finder ShowPathbar -bool true

        # Show status bar in Finder
        defaults write com.apple.finder ShowStatusBar -bool true

        # Hide the macOS top menu bar (compatible with newer macOS versions)
        defaults write NSGlobalDomain AppleMenuBarVisibleInFullscreen -bool false
        defaults write com.apple.menuextra.clock IsMenuVisible -bool false
        defaults write com.apple.controlcenter "NSStatusItem Visible Bluetooth" -bool false
        defaults write com.apple.controlcenter "NSStatusItem Visible WiFi" -bool false
        defaults write com.apple.controlcenter "NSStatusItem Visible Sound" -bool false

        # Autohide the Dock
        defaults write com.apple.dock autohide -bool true
        defaults write com.apple.dock autohide-time-modifier -float 0.15

        # Enable Touch ID for sudo authentication
        if ! grep -q "pam_tid.so" /etc/pam.d/sudo; then
          sudo bash -c 'echo "auth       sufficient     pam_tid.so" | cat - /etc/pam.d/sudo > /tmp/sudo.new && mv /tmp/sudo.new /etc/pam.d/sudo'
        fi

        # Disable press-and-hold for keys in favor of key repeat
        defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

        # Set a faster keyboard repeat rate
        defaults write NSGlobalDomain KeyRepeat -int 1
        #defaults write NSGlobalDomain InitialKeyRepeat -int 15

        # Disable auto-correct
        defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

        # Require password immediately after sleep or screen saver begins
        defaults write com.apple.screensaver askForPassword -int 1
        defaults write com.apple.screensaver askForPasswordDelay -int 0

        # Save screenshots to the Screenshots directory in Downloads
        defaults write com.apple.screencapture location -string "${HOME}/Downloads/Screenshots"

        # Save screenshots in PNG format
        defaults write com.apple.screencapture type -string "png"

        # Disable shadow in screenshots
        defaults write com.apple.screencapture disable-shadow -bool true

        # Enable tap to click
        defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
        defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true

        # Enable three finger drag
        defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerDrag -bool true
        defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true

        # Disable "natural" scrolling
        defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

        # Expand save panel by default
        defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
        defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

        # Expand print panel by default
        defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
        defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

        # Disable the "Are you sure you want to open this application?" dialog
        defaults write com.apple.LaunchServices LSQuarantine -bool false

        # Set keyboard layout to US
        defaults write NSGlobalDomain AppleLocale -string "en_US"
        defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

        # Set move mouse on focus
        defaults write com.apple.Terminal FocusFollowsMouse -bool true

        # Set AppleFontSmoothing for Alacritty (replaces use_thin_strokes)
        #defaults write -g AppleFontSmoothing -int 0

        # Restart affected applications
        killall Finder
        killall SystemUIServer
        killall Dock
        killall AeroSpace || true
      tags: macos-settings



